{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"65mEyT9qo3x-"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ws6MwvMbo3yH"},"outputs":[],"source":["from sklearn.datasets import load_iris\n","from sklearn.model_selection import cross_val_score\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn import tree\n","from sklearn.model_selection import train_test_split"]},{"cell_type":"markdown","metadata":{"id":"hjm_qqb9o3yI"},"source":["## Decision Tree classifier\n","\n","Today your task is to get familiar with decision tree classifier - simple, but powerful case of dicsrete math usage"]},{"cell_type":"markdown","metadata":{"id":"jFN6XLm7o3yL"},"source":["### Let's use the iris dataset\n","Read more on this: https://scikit-learn.org/stable/auto_examples/datasets/plot_iris_dataset.html\n","\n","https://en.wikipedia.org/wiki/Iris_flower_data_set"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ieYGl3ayo3yM","outputId":"9b74a31e-58ba-4798-ab45-fb082548ce91"},"outputs":[{"data":{"text/plain":["['DESCR',\n"," 'data',\n"," 'feature_names',\n"," 'filename',\n"," 'frame',\n"," 'target',\n"," 'target_names']"]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["iris = load_iris()\n","dir(iris)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iamIUmZ7o3yO","outputId":"6962ee97-04a3-4b72-f2a3-81507657eb86"},"outputs":[{"data":{"text/plain":["(150, 4)"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["iris.data.shape"]},{"cell_type":"markdown","metadata":{"id":"A-8Stu1go3yP"},"source":["This means that we have 150 entries (samples, infos about a flower). The columns being: Sepal Length, Sepal Width, Petal Length and Petal Width. Let's look at first two entries"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5PV2BYcxo3yR","outputId":"29789442-635f-4ffa-d139-8d061f1f5c5f"},"outputs":[{"data":{"text/plain":["array([[5.1, 3.5, 1.4, 0.2],\n","       [4.9, 3. , 1.4, 0.2]])"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["iris.data[0:2]"]},{"cell_type":"markdown","metadata":{"id":"njzeESX5o3yS"},"source":["## To undestand data little bit better, let's plot some features"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZzQLVwMEo3yT","outputId":"5c12c926-a955-4593-eeda-8a67ea92ff75"},"outputs":[{"data":{"text/plain":["Text(0, 0.5, 'Sepal width')"]},"execution_count":6,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 576x432 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["X = iris.data[:, :2]  # we only take the first two features.\n","y = iris.target\n","\n","plt.figure(2, figsize=(8, 6))\n","plt.clf()\n","\n","# Plot the training points\n","plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Set1, edgecolor=\"k\")\n","plt.xlabel(\"Sepal length\")\n","plt.ylabel(\"Sepal width\")"]},{"cell_type":"markdown","metadata":{"id":"Vtm4tqhqo3yU"},"source":["From this we can clearly see, that even basing on those two parameters, we can clearly divide (classify) out data into several groups. For this, we will use decision tree classifier: https://scikit-learn.org/stable/modules/tree.html#tree"]},{"cell_type":"markdown","metadata":{"id":"vGdGGT6Ao3yV"},"source":["**Decision Trees (DTs) are a non-parametric supervised learning method used for classification and regression**. The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred from the data features. A tree can be seen as a piecewise constant approximation."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rFGBnH5jo3yW"},"outputs":[],"source":["clf = DecisionTreeClassifier()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SJMVyaPjo3yW","outputId":"4c2ed421-6e69-4d15-9bcf-f236778b7c2a"},"outputs":[{"data":{"text/plain":["((150, 4), (150,))"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["X, y = iris.data, iris.target\n","X.shape, y.shape"]},{"cell_type":"markdown","metadata":{"id":"Io05Dziio3yX"},"source":["### Train / test split\n","\n","We train our model using one dataset and evaluate its performance basing on the test dataset. Reason to use two separate datasets is that our model learns its parameters from data, thus test set allows us to check its possibilities on completely new data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SXLIFugUo3yX"},"outputs":[],"source":["X, X_test, y, y_test = train_test_split(X, y, test_size= 0.20)"]},{"cell_type":"markdown","metadata":{"id":"0PvzllsCo3yY"},"source":["### Model learning\n","\n","It learns its parameters (where it should split data and for whar threshold here)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gaHju-gXo3yY"},"outputs":[],"source":["clf = clf.fit(X, y)"]},{"cell_type":"markdown","metadata":{"id":"-MElY2Ozo3ya"},"source":["### Visualization of produced tree\n","\n","You do not need to understand this piece of code :)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M2laEZ_ro3yc","outputId":"fee4ae4d-9d10-4b3b-80a5-e5eef895e10d"},"outputs":[{"data":{"text/plain":["'iris.pdf'"]},"execution_count":21,"metadata":{},"output_type":"execute_result"}],"source":["import graphviz \n","dot_data = tree.export_graphviz(clf, out_file=None) \n","graph = graphviz.Source(dot_data) \n","graph.render(\"iris\")"]},{"cell_type":"code","execution_count":null,"metadata":{"scrolled":true,"id":"w8BDKB0Eo3ye","outputId":"d7ee9b3b-63f4-4ead-b953-4b6ad84c33c8"},"outputs":[{"data":{"image/svg+xml":["<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n","<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n"," \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n","<!-- Generated by graphviz version 2.50.0 (20211204.2007)\n"," -->\n","<!-- Title: Tree Pages: 1 -->\n","<svg width=\"606pt\" height=\"671pt\"\n"," viewBox=\"0.00 0.00 606.00 671.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n","<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 667)\">\n","<title>Tree</title>\n","<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-667 602,-667 602,4 -4,4\"/>\n","<!-- 0 -->\n","<g id=\"node1\" class=\"node\">\n","<title>0</title>\n","<path fill=\"#faf7fe\" stroke=\"black\" d=\"M285.5,-663C285.5,-663 163.5,-663 163.5,-663 157.5,-663 151.5,-657 151.5,-651 151.5,-651 151.5,-592 151.5,-592 151.5,-586 157.5,-580 163.5,-580 163.5,-580 285.5,-580 285.5,-580 291.5,-580 297.5,-586 297.5,-592 297.5,-592 297.5,-651 297.5,-651 297.5,-657 291.5,-663 285.5,-663\"/>\n","<text text-anchor=\"start\" x=\"159.5\" y=\"-647.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">petal width (cm) ≤ 0.7</text>\n","<text text-anchor=\"start\" x=\"189\" y=\"-632.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.664</text>\n","<text text-anchor=\"start\" x=\"179.5\" y=\"-617.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 120</text>\n","<text text-anchor=\"start\" x=\"166.5\" y=\"-602.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [35, 41, 44]</text>\n","<text text-anchor=\"start\" x=\"176\" y=\"-587.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = virginica</text>\n","</g>\n","<!-- 1 -->\n","<g id=\"node2\" class=\"node\">\n","<title>1</title>\n","<path fill=\"#e58139\" stroke=\"black\" d=\"M194,-536.5C194,-536.5 101,-536.5 101,-536.5 95,-536.5 89,-530.5 89,-524.5 89,-524.5 89,-480.5 89,-480.5 89,-474.5 95,-468.5 101,-468.5 101,-468.5 194,-468.5 194,-468.5 200,-468.5 206,-474.5 206,-480.5 206,-480.5 206,-524.5 206,-524.5 206,-530.5 200,-536.5 194,-536.5\"/>\n","<text text-anchor=\"start\" x=\"119.5\" y=\"-521.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n","<text text-anchor=\"start\" x=\"106.5\" y=\"-506.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 35</text>\n","<text text-anchor=\"start\" x=\"97\" y=\"-491.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [35, 0, 0]</text>\n","<text text-anchor=\"start\" x=\"104\" y=\"-476.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = setosa</text>\n","</g>\n","<!-- 0&#45;&gt;1 -->\n","<g id=\"edge1\" class=\"edge\">\n","<title>0&#45;&gt;1</title>\n","<path fill=\"none\" stroke=\"black\" d=\"M197.79,-579.91C190.38,-568.65 182.33,-556.42 174.88,-545.11\"/>\n","<polygon fill=\"black\" stroke=\"black\" points=\"177.75,-543.1 169.33,-536.67 171.9,-546.94 177.75,-543.1\"/>\n","<text text-anchor=\"middle\" x=\"164.28\" y=\"-557.45\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">True</text>\n","</g>\n","<!-- 2 -->\n","<g id=\"node3\" class=\"node\">\n","<title>2</title>\n","<path fill=\"#f6f2fd\" stroke=\"black\" d=\"M366.5,-544C366.5,-544 236.5,-544 236.5,-544 230.5,-544 224.5,-538 224.5,-532 224.5,-532 224.5,-473 224.5,-473 224.5,-467 230.5,-461 236.5,-461 236.5,-461 366.5,-461 366.5,-461 372.5,-461 378.5,-467 378.5,-473 378.5,-473 378.5,-532 378.5,-532 378.5,-538 372.5,-544 366.5,-544\"/>\n","<text text-anchor=\"start\" x=\"232.5\" y=\"-528.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">petal width (cm) ≤ 1.75</text>\n","<text text-anchor=\"start\" x=\"266\" y=\"-513.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.499</text>\n","<text text-anchor=\"start\" x=\"260.5\" y=\"-498.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 85</text>\n","<text text-anchor=\"start\" x=\"247\" y=\"-483.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 41, 44]</text>\n","<text text-anchor=\"start\" x=\"253\" y=\"-468.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = virginica</text>\n","</g>\n","<!-- 0&#45;&gt;2 -->\n","<g id=\"edge2\" class=\"edge\">\n","<title>0&#45;&gt;2</title>\n","<path fill=\"none\" stroke=\"black\" d=\"M251.21,-579.91C257.01,-571.1 263.2,-561.7 269.18,-552.61\"/>\n","<polygon fill=\"black\" stroke=\"black\" points=\"272.26,-554.3 274.83,-544.02 266.41,-550.45 272.26,-554.3\"/>\n","<text text-anchor=\"middle\" x=\"279.88\" y=\"-564.81\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">False</text>\n","</g>\n","<!-- 3 -->\n","<g id=\"node4\" class=\"node\">\n","<title>3</title>\n","<path fill=\"#4de88e\" stroke=\"black\" d=\"M281,-425C281,-425 146,-425 146,-425 140,-425 134,-419 134,-413 134,-413 134,-354 134,-354 134,-348 140,-342 146,-342 146,-342 281,-342 281,-342 287,-342 293,-348 293,-354 293,-354 293,-413 293,-413 293,-419 287,-425 281,-425\"/>\n","<text text-anchor=\"start\" x=\"142\" y=\"-409.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">petal length (cm) ≤ 4.95</text>\n","<text text-anchor=\"start\" x=\"178\" y=\"-394.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.165</text>\n","<text text-anchor=\"start\" x=\"172.5\" y=\"-379.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 44</text>\n","<text text-anchor=\"start\" x=\"163\" y=\"-364.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 40, 4]</text>\n","<text text-anchor=\"start\" x=\"161\" y=\"-349.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = versicolor</text>\n","</g>\n","<!-- 2&#45;&gt;3 -->\n","<g id=\"edge3\" class=\"edge\">\n","<title>2&#45;&gt;3</title>\n","<path fill=\"none\" stroke=\"black\" d=\"M270.97,-460.91C264.21,-451.92 256.98,-442.32 250.02,-433.05\"/>\n","<polygon fill=\"black\" stroke=\"black\" points=\"252.79,-430.91 243.98,-425.02 247.19,-435.12 252.79,-430.91\"/>\n","</g>\n","<!-- 10 -->\n","<g id=\"node11\" class=\"node\">\n","<title>10</title>\n","<path fill=\"#843ee6\" stroke=\"black\" d=\"M458,-425C458,-425 323,-425 323,-425 317,-425 311,-419 311,-413 311,-413 311,-354 311,-354 311,-348 317,-342 323,-342 323,-342 458,-342 458,-342 464,-342 470,-348 470,-354 470,-354 470,-413 470,-413 470,-419 464,-425 458,-425\"/>\n","<text text-anchor=\"start\" x=\"319\" y=\"-409.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">petal length (cm) ≤ 4.85</text>\n","<text text-anchor=\"start\" x=\"355\" y=\"-394.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.048</text>\n","<text text-anchor=\"start\" x=\"349.5\" y=\"-379.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 41</text>\n","<text text-anchor=\"start\" x=\"340\" y=\"-364.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 1, 40]</text>\n","<text text-anchor=\"start\" x=\"342\" y=\"-349.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = virginica</text>\n","</g>\n","<!-- 2&#45;&gt;10 -->\n","<g id=\"edge10\" class=\"edge\">\n","<title>2&#45;&gt;10</title>\n","<path fill=\"none\" stroke=\"black\" d=\"M332.38,-460.91C339.21,-451.92 346.52,-442.32 353.57,-433.05\"/>\n","<polygon fill=\"black\" stroke=\"black\" points=\"356.41,-435.1 359.68,-425.02 350.84,-430.86 356.41,-435.1\"/>\n","</g>\n","<!-- 4 -->\n","<g id=\"node5\" class=\"node\">\n","<title>4</title>\n","<path fill=\"#39e581\" stroke=\"black\" d=\"M109,-298.5C109,-298.5 12,-298.5 12,-298.5 6,-298.5 0,-292.5 0,-286.5 0,-286.5 0,-242.5 0,-242.5 0,-236.5 6,-230.5 12,-230.5 12,-230.5 109,-230.5 109,-230.5 115,-230.5 121,-236.5 121,-242.5 121,-242.5 121,-286.5 121,-286.5 121,-292.5 115,-298.5 109,-298.5\"/>\n","<text text-anchor=\"start\" x=\"32.5\" y=\"-283.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n","<text text-anchor=\"start\" x=\"19.5\" y=\"-268.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 38</text>\n","<text text-anchor=\"start\" x=\"10\" y=\"-253.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 38, 0]</text>\n","<text text-anchor=\"start\" x=\"8\" y=\"-238.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = versicolor</text>\n","</g>\n","<!-- 3&#45;&gt;4 -->\n","<g id=\"edge4\" class=\"edge\">\n","<title>3&#45;&gt;4</title>\n","<path fill=\"none\" stroke=\"black\" d=\"M160.42,-341.91C144.69,-329.88 127.5,-316.73 111.88,-304.79\"/>\n","<polygon fill=\"black\" stroke=\"black\" points=\"113.94,-301.96 103.87,-298.67 109.69,-307.52 113.94,-301.96\"/>\n","</g>\n","<!-- 5 -->\n","<g id=\"node6\" class=\"node\">\n","<title>5</title>\n","<path fill=\"#c09cf2\" stroke=\"black\" d=\"M281.5,-306C281.5,-306 151.5,-306 151.5,-306 145.5,-306 139.5,-300 139.5,-294 139.5,-294 139.5,-235 139.5,-235 139.5,-229 145.5,-223 151.5,-223 151.5,-223 281.5,-223 281.5,-223 287.5,-223 293.5,-229 293.5,-235 293.5,-235 293.5,-294 293.5,-294 293.5,-300 287.5,-306 281.5,-306\"/>\n","<text text-anchor=\"start\" x=\"147.5\" y=\"-290.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">petal width (cm) ≤ 1.55</text>\n","<text text-anchor=\"start\" x=\"181\" y=\"-275.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.444</text>\n","<text text-anchor=\"start\" x=\"179\" y=\"-260.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 6</text>\n","<text text-anchor=\"start\" x=\"169.5\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 2, 4]</text>\n","<text text-anchor=\"start\" x=\"168\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = virginica</text>\n","</g>\n","<!-- 3&#45;&gt;5 -->\n","<g id=\"edge5\" class=\"edge\">\n","<title>3&#45;&gt;5</title>\n","<path fill=\"none\" stroke=\"black\" d=\"M214.54,-341.91C214.75,-333.56 214.98,-324.67 215.2,-316.02\"/>\n","<polygon fill=\"black\" stroke=\"black\" points=\"218.7,-316.11 215.46,-306.02 211.71,-315.93 218.7,-316.11\"/>\n","</g>\n","<!-- 6 -->\n","<g id=\"node7\" class=\"node\">\n","<title>6</title>\n","<path fill=\"#8139e5\" stroke=\"black\" d=\"M109,-179.5C109,-179.5 20,-179.5 20,-179.5 14,-179.5 8,-173.5 8,-167.5 8,-167.5 8,-123.5 8,-123.5 8,-117.5 14,-111.5 20,-111.5 20,-111.5 109,-111.5 109,-111.5 115,-111.5 121,-117.5 121,-123.5 121,-123.5 121,-167.5 121,-167.5 121,-173.5 115,-179.5 109,-179.5\"/>\n","<text text-anchor=\"start\" x=\"36.5\" y=\"-164.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n","<text text-anchor=\"start\" x=\"27\" y=\"-149.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n","<text text-anchor=\"start\" x=\"17.5\" y=\"-134.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 0, 3]</text>\n","<text text-anchor=\"start\" x=\"16\" y=\"-119.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = virginica</text>\n","</g>\n","<!-- 5&#45;&gt;6 -->\n","<g id=\"edge6\" class=\"edge\">\n","<title>5&#45;&gt;6</title>\n","<path fill=\"none\" stroke=\"black\" d=\"M163.76,-222.91C148.14,-210.88 131.06,-197.73 115.54,-185.79\"/>\n","<polygon fill=\"black\" stroke=\"black\" points=\"117.65,-182.99 107.59,-179.67 113.38,-188.54 117.65,-182.99\"/>\n","</g>\n","<!-- 7 -->\n","<g id=\"node8\" class=\"node\">\n","<title>7</title>\n","<path fill=\"#9cf2c0\" stroke=\"black\" d=\"M289.5,-187C289.5,-187 151.5,-187 151.5,-187 145.5,-187 139.5,-181 139.5,-175 139.5,-175 139.5,-116 139.5,-116 139.5,-110 145.5,-104 151.5,-104 151.5,-104 289.5,-104 289.5,-104 295.5,-104 301.5,-110 301.5,-116 301.5,-116 301.5,-175 301.5,-175 301.5,-181 295.5,-187 289.5,-187\"/>\n","<text text-anchor=\"start\" x=\"147.5\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">sepal length (cm) ≤ 6.95</text>\n","<text text-anchor=\"start\" x=\"185\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.444</text>\n","<text text-anchor=\"start\" x=\"183\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 3</text>\n","<text text-anchor=\"start\" x=\"173.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 2, 1]</text>\n","<text text-anchor=\"start\" x=\"168\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = versicolor</text>\n","</g>\n","<!-- 5&#45;&gt;7 -->\n","<g id=\"edge7\" class=\"edge\">\n","<title>5&#45;&gt;7</title>\n","<path fill=\"none\" stroke=\"black\" d=\"M217.89,-222.91C218.17,-214.56 218.48,-205.67 218.77,-197.02\"/>\n","<polygon fill=\"black\" stroke=\"black\" points=\"222.27,-197.13 219.11,-187.02 215.27,-196.9 222.27,-197.13\"/>\n","</g>\n","<!-- 8 -->\n","<g id=\"node9\" class=\"node\">\n","<title>8</title>\n","<path fill=\"#39e581\" stroke=\"black\" d=\"M202,-68C202,-68 105,-68 105,-68 99,-68 93,-62 93,-56 93,-56 93,-12 93,-12 93,-6 99,0 105,0 105,0 202,0 202,0 208,0 214,-6 214,-12 214,-12 214,-56 214,-56 214,-62 208,-68 202,-68\"/>\n","<text text-anchor=\"start\" x=\"125.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n","<text text-anchor=\"start\" x=\"116\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n","<text text-anchor=\"start\" x=\"106.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 2, 0]</text>\n","<text text-anchor=\"start\" x=\"101\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = versicolor</text>\n","</g>\n","<!-- 7&#45;&gt;8 -->\n","<g id=\"edge8\" class=\"edge\">\n","<title>7&#45;&gt;8</title>\n","<path fill=\"none\" stroke=\"black\" d=\"M195.55,-103.73C190.19,-94.97 184.52,-85.7 179.14,-76.91\"/>\n","<polygon fill=\"black\" stroke=\"black\" points=\"182.08,-75 173.88,-68.3 176.11,-78.66 182.08,-75\"/>\n","</g>\n","<!-- 9 -->\n","<g id=\"node10\" class=\"node\">\n","<title>9</title>\n","<path fill=\"#8139e5\" stroke=\"black\" d=\"M333,-68C333,-68 244,-68 244,-68 238,-68 232,-62 232,-56 232,-56 232,-12 232,-12 232,-6 238,0 244,0 244,0 333,0 333,0 339,0 345,-6 345,-12 345,-12 345,-56 345,-56 345,-62 339,-68 333,-68\"/>\n","<text text-anchor=\"start\" x=\"260.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n","<text text-anchor=\"start\" x=\"251\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n","<text text-anchor=\"start\" x=\"241.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 0, 1]</text>\n","<text text-anchor=\"start\" x=\"240\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = virginica</text>\n","</g>\n","<!-- 7&#45;&gt;9 -->\n","<g id=\"edge9\" class=\"edge\">\n","<title>7&#45;&gt;9</title>\n","<path fill=\"none\" stroke=\"black\" d=\"M245.82,-103.73C251.26,-94.97 257.01,-85.7 262.48,-76.91\"/>\n","<polygon fill=\"black\" stroke=\"black\" points=\"265.52,-78.64 267.82,-68.3 259.57,-74.95 265.52,-78.64\"/>\n","</g>\n","<!-- 11 -->\n","<g id=\"node12\" class=\"node\">\n","<title>11</title>\n","<path fill=\"#ffffff\" stroke=\"black\" d=\"M451,-306C451,-306 326,-306 326,-306 320,-306 314,-300 314,-294 314,-294 314,-235 314,-235 314,-229 320,-223 326,-223 326,-223 451,-223 451,-223 457,-223 463,-229 463,-235 463,-235 463,-294 463,-294 463,-300 457,-306 451,-306\"/>\n","<text text-anchor=\"start\" x=\"322\" y=\"-290.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">sepal width (cm) ≤ 3.0</text>\n","<text text-anchor=\"start\" x=\"360.5\" y=\"-275.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.5</text>\n","<text text-anchor=\"start\" x=\"351\" y=\"-260.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\n","<text text-anchor=\"start\" x=\"341.5\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 1, 1]</text>\n","<text text-anchor=\"start\" x=\"336\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = versicolor</text>\n","</g>\n","<!-- 10&#45;&gt;11 -->\n","<g id=\"edge11\" class=\"edge\">\n","<title>10&#45;&gt;11</title>\n","<path fill=\"none\" stroke=\"black\" d=\"M389.81,-341.91C389.66,-333.56 389.51,-324.67 389.36,-316.02\"/>\n","<polygon fill=\"black\" stroke=\"black\" points=\"392.86,-315.96 389.19,-306.02 385.86,-316.08 392.86,-315.96\"/>\n","</g>\n","<!-- 14 -->\n","<g id=\"node15\" class=\"node\">\n","<title>14</title>\n","<path fill=\"#8139e5\" stroke=\"black\" d=\"M586,-298.5C586,-298.5 493,-298.5 493,-298.5 487,-298.5 481,-292.5 481,-286.5 481,-286.5 481,-242.5 481,-242.5 481,-236.5 487,-230.5 493,-230.5 493,-230.5 586,-230.5 586,-230.5 592,-230.5 598,-236.5 598,-242.5 598,-242.5 598,-286.5 598,-286.5 598,-292.5 592,-298.5 586,-298.5\"/>\n","<text text-anchor=\"start\" x=\"511.5\" y=\"-283.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n","<text text-anchor=\"start\" x=\"498.5\" y=\"-268.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 39</text>\n","<text text-anchor=\"start\" x=\"489\" y=\"-253.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 0, 39]</text>\n","<text text-anchor=\"start\" x=\"491\" y=\"-238.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = virginica</text>\n","</g>\n","<!-- 10&#45;&gt;14 -->\n","<g id=\"edge14\" class=\"edge\">\n","<title>10&#45;&gt;14</title>\n","<path fill=\"none\" stroke=\"black\" d=\"M442.19,-341.91C457.37,-329.99 473.95,-316.98 489.04,-305.12\"/>\n","<polygon fill=\"black\" stroke=\"black\" points=\"491.56,-307.6 497.26,-298.67 487.24,-302.09 491.56,-307.6\"/>\n","</g>\n","<!-- 12 -->\n","<g id=\"node13\" class=\"node\">\n","<title>12</title>\n","<path fill=\"#8139e5\" stroke=\"black\" d=\"M431,-179.5C431,-179.5 342,-179.5 342,-179.5 336,-179.5 330,-173.5 330,-167.5 330,-167.5 330,-123.5 330,-123.5 330,-117.5 336,-111.5 342,-111.5 342,-111.5 431,-111.5 431,-111.5 437,-111.5 443,-117.5 443,-123.5 443,-123.5 443,-167.5 443,-167.5 443,-173.5 437,-179.5 431,-179.5\"/>\n","<text text-anchor=\"start\" x=\"358.5\" y=\"-164.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n","<text text-anchor=\"start\" x=\"349\" y=\"-149.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n","<text text-anchor=\"start\" x=\"339.5\" y=\"-134.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 0, 1]</text>\n","<text text-anchor=\"start\" x=\"338\" y=\"-119.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = virginica</text>\n","</g>\n","<!-- 11&#45;&gt;12 -->\n","<g id=\"edge12\" class=\"edge\">\n","<title>11&#45;&gt;12</title>\n","<path fill=\"none\" stroke=\"black\" d=\"M387.81,-222.91C387.62,-212.2 387.43,-200.62 387.24,-189.78\"/>\n","<polygon fill=\"black\" stroke=\"black\" points=\"390.74,-189.61 387.07,-179.67 383.74,-189.73 390.74,-189.61\"/>\n","</g>\n","<!-- 13 -->\n","<g id=\"node14\" class=\"node\">\n","<title>13</title>\n","<path fill=\"#39e581\" stroke=\"black\" d=\"M570,-179.5C570,-179.5 473,-179.5 473,-179.5 467,-179.5 461,-173.5 461,-167.5 461,-167.5 461,-123.5 461,-123.5 461,-117.5 467,-111.5 473,-111.5 473,-111.5 570,-111.5 570,-111.5 576,-111.5 582,-117.5 582,-123.5 582,-123.5 582,-167.5 582,-167.5 582,-173.5 576,-179.5 570,-179.5\"/>\n","<text text-anchor=\"start\" x=\"493.5\" y=\"-164.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\n","<text text-anchor=\"start\" x=\"484\" y=\"-149.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 1</text>\n","<text text-anchor=\"start\" x=\"474.5\" y=\"-134.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 1, 0]</text>\n","<text text-anchor=\"start\" x=\"469\" y=\"-119.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = versicolor</text>\n","</g>\n","<!-- 11&#45;&gt;13 -->\n","<g id=\"edge13\" class=\"edge\">\n","<title>11&#45;&gt;13</title>\n","<path fill=\"none\" stroke=\"black\" d=\"M434.64,-222.91C448.07,-211.1 462.71,-198.22 476.09,-186.45\"/>\n","<polygon fill=\"black\" stroke=\"black\" points=\"478.6,-188.9 483.8,-179.67 473.98,-183.64 478.6,-188.9\"/>\n","</g>\n","</g>\n","</svg>\n"],"text/plain":["<graphviz.files.Source at 0x7fcef0e1c5e0>"]},"execution_count":22,"metadata":{},"output_type":"execute_result"}],"source":["dot_data = tree.export_graphviz(clf, out_file=None, \n","                     feature_names=iris.feature_names,  \n","                     class_names=iris.target_names,  \n","                     filled=True, rounded=True,  \n","                     special_characters=True)  \n","graph = graphviz.Source(dot_data)  \n","graph "]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rbvy6RY1o3yl","outputId":"d116d5b2-fffd-4a41-ce8d-0f4ea9a223e5"},"outputs":[{"data":{"text/plain":["(30, 4)"]},"execution_count":23,"metadata":{},"output_type":"execute_result"}],"source":["X_test.shape"]},{"cell_type":"markdown","metadata":{"id":"ImGQ83jJo3yl"},"source":["### Prediction step\n","\n","Now we can use our model to predict which type has a flower, basing on its parameters.\n","\n","This is conducted basically via traversing the tree that you can see above."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_BxLLAKRo3ym"},"outputs":[],"source":["predictions = clf.predict(X_test)"]},{"cell_type":"markdown","metadata":{"id":"e98ONLBPo3yt"},"source":["### We can also measure the accuracy of our model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8Y15rFmKo3yu","outputId":"682c619e-d678-4abd-986c-d52fa22ea5ac"},"outputs":[{"data":{"text/plain":["0.9666666666666667"]},"execution_count":25,"metadata":{},"output_type":"execute_result"}],"source":["sum(predictions == y_test) / len(y_test)"]},{"cell_type":"markdown","metadata":{"id":"B9WSsSTro3yu"},"source":["To get clearer intuition about predicion, let's look at those X, that should be labeled to some flower"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e6C9eRx0o3yw","outputId":"9fa31dff-19d4-4eaa-ac25-0a8d0de46a17"},"outputs":[{"data":{"text/plain":["array([0, 0, 0, 1, 0, 1, 0, 0, 2, 1, 1, 2, 0, 1, 2, 0, 0, 0, 0, 1, 1, 1,\n","       1, 2, 2, 0, 0, 2, 0, 0])"]},"execution_count":26,"metadata":{},"output_type":"execute_result"}],"source":["y_test"]},{"cell_type":"markdown","metadata":{"id":"Nde-29Uio3yx"},"source":["Here you can traverse the tree above by yourself and make sure that prediction works"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"K3jWJpLyo3yy","outputId":"c38191ea-fe72-47ae-ca77-3932c98eb3f4"},"outputs":[{"data":{"text/plain":["array([5.2, 3.5, 1.5, 0.2])"]},"execution_count":29,"metadata":{},"output_type":"execute_result"}],"source":["X_test[1]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iR-O-Js_o3yy","outputId":"9006b14c-a035-461f-9184-f2a88ad6e948"},"outputs":[{"data":{"text/plain":["array([0])"]},"execution_count":30,"metadata":{},"output_type":"execute_result"}],"source":["clf.predict([X_test[1]])"]},{"cell_type":"markdown","metadata":{"id":"W7qyhNJio3yz"},"source":["## Finally, it is your turn to write such classifier by yourself!"]},{"cell_type":"markdown","metadata":{"id":"Yn8KDZvao3y1"},"source":["###  Gini impurity\n","\n","Decision trees use the concept of Gini impurity to describe how “pure” a node is. A node is pure (G = 0) if all its samples belong to the same class, while a node with many samples from many different classes will have a Gini closer to 1.\n","\n","$G = 1 - \\sum_{k=1}^{n}p_{k}^2$\n","\n","For example if a node contains five samples, with two belonging to the first class (first flower), two of class 2, one of class 3 and none of class 4, then\n","\n","$G = 1 - (\\frac{2}{5})^2 - (\\frac{2}{5})^2 - (\\frac{1}{5})^2 = 0.64$"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"awid6lalo3y6","executionInfo":{"status":"ok","timestamp":1645475471619,"user_tz":-120,"elapsed":263,"user":{"displayName":"Анастасія Швець","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgLwhYLK2ugIRWEErPcUXGqA68PKmQXNwEaS1SC=s64","userId":"14015739611781735740"}},"outputId":"00f01feb-2fb1-4dae-a913-323a1d547901"},"outputs":[{"output_type":"stream","name":"stdout","text":["0.9666666666666667\n"]}],"source":["class Node:\n","    \n","    def __init__(self, X, y, gini, predicted_class):\n","        self.X = X\n","        self.y = y\n","        self.gini = gini\n","        self.feature_index = 0\n","        self.threshold = 0\n","        self.predicted_class=predicted_class\n","        self.left = None\n","        self.right = None\n","\n","\n","class MyDecisionTreeClassifier:\n","    \n","    def __init__(self, max_depth):\n","        self.max_depth = max_depth\n","    \n","    def gini(self, group):\n","        \"\"\"return gini for group of classes\"\"\"\n","        amount=len(group)\n","        gini=1            \n","        for clas in set(group):\n","            this_class=group.count(clas)\n","            prob=this_class/amount\n","            gini-=prob**2\n","        return gini  \n","\n","    def split_data(self, X, y):\n","        \n","        # test all the possible splits in O(N^2)\n","        # return index and threshold value\n","        if len(X)==0:\n","            return None,None\n","        number_of_character=len(X[0])\n","        length=len(y)\n","        if length <= 1:\n","            return None, None\n","        min_gini = self.gini(y)\n","        min_ind, min_thr = None, None\n","\n","        for ind in range(number_of_character):\n","            thresholds, classes = zip(*sorted(zip([x[ind] for x in X], y)))\n","            for i in range(length):\n","                gini_left=self.gini(classes[:i])\n","                gini_right=self.gini(classes[i:])\n","                gini = (i * gini_left + (length - i) * gini_right) / length\n","\n","                if gini < min_gini:\n","                    min_gini = gini\n","                    min_ind = ind\n","                    min_thr = (thresholds[i] + thresholds[i - 1]) / 2 \n","\n","        return min_ind, min_thr\n","    \n","    def build_tree(self, X, y, depth = 0):\n","        \n","        # create a root node\n","        \n","        \n","        # recursively split until max depth is not exeeced\n","        max_y=None\n","        max_count=0\n","        for item in set(y):\n","            count=y.count(item)\n","            if max_count<count:\n","                max_count=count\n","                max_y=item\n","        predicted_class=max_y\n","\n","        node = Node(X, y, gini=self.gini(y), predicted_class=predicted_class)\n","\n","        if depth < self.max_depth:\n","            ind, thr = self.split_data(X, y)\n","            if ind is not None:\n","                X_left, X_right =[],[]\n","                y_left, y_right =[],[]\n","                for i,n in enumerate(X):\n","                    if n[ind]<thr:\n","                        X_left.append(n)\n","                        y_left.append(y[i])\n","                    else:\n","                        X_right.append(n)\n","                        y_right.append(y[i])\n","                node.feature_index = ind\n","                node.threshold = thr\n","                node.left = self.build_tree(X_left, y_left, depth + 1)\n","                node.right = self.build_tree(X_right, y_right, depth + 1)\n","        return node\n","    \n","    def fit(self, X, y):\n","        \n","        # basically wrapper for build tree\n","        self.tree=self.build_tree(X, y)\n","    \n","    def predict(self, X_test):\n","        \n","        # traverse the tree while there is left node\n","        # and return the predicted class for it, \n","        # note that X_test can be not only one example\n","        list_node=[]\n","        for x_test in X_test:\n","            node = self.tree\n","            while node.left:\n","                if x_test[node.feature_index] < node.threshold:\n","                    node = node.left\n","                else:\n","                    node = node.right\n","            list_node.append(node.predicted_class)\n","        return list_node\n"]},{"cell_type":"markdown","metadata":{"id":"kdkuLjQ1o3y7"},"source":["### Useful links:\n","- https://machinelearningmastery.com/implement-decision-tree-algorithm-scratch-python/\n","- https://towardsdatascience.com/decision-tree-from-scratch-in-python-46e99dfea775\n","- https://towardsdatascience.com/decision-tree-algorithm-in-python-from-scratch-8c43f0e40173\n","- https://anderfernandez.com/en/blog/code-decision-tree-python-from-scratch/"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fy_v3MnGo3y8"},"outputs":[],"source":[""]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.0"},"colab":{"name":"Копія записника \"DecisionTreeClassiffier.ipynb\"","provenance":[{"file_id":"1se3ZIye4-oqFN3BV9_Ws2L_3m-JR0OvV","timestamp":1645475593419}],"collapsed_sections":[]}},"nbformat":4,"nbformat_minor":0}